# -*- coding: utf-8 -*-
"""Text_Classification_NLTK.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Mpf_Ill0epsJG4t1P2Ui65qwlq8EWbao

# Text-Classification with NLTK

## Loading Data
"""

import nltk
import random
import pickle
from nltk.corpus import movie_reviews
nltk.download('all')

documents = []
for category in movie_reviews.categories():
    for fileid in movie_reviews.fileids(category):
        documents.append([movie_reviews.words(fileid), category])

random.shuffle(documents)

print(documents)

print(documents[0])

print(documents[0][0])
print(documents[0][1])

all_words = []
for w in movie_reviews.words():
    all_words.append(w.lower())

print(len(all_words))

all_words_freq = nltk.FreqDist(all_words)
print(all_words_freq.most_common(15))

print(all_words_freq['good'])
print(all_words_freq['bad'])

"""## Training Data"""

print(documents)

word_features = list(all_words_freq.keys())
word_features = word_features[:3000]

print(word_features)

def find_features(document):
    words = set(document)
    features = {}
    for w in word_features:
        if(w in words):
            features[w] = True
        else:
            features[w] = False

    return features

print(find_features(movie_reviews.words('neg/cv000_29416.txt')))

feature_sets = []
for document, category in documents:
    # print(document)
    # print(rev)
    # break

    features = find_features(document)
    feature_sets.append([features, category])

print(feature_sets[0])

train_set = feature_sets[:1900]
test_set = feature_sets[1900:]

"""# NLTK Baseline"""

classifier = nltk.NaiveBayesClassifier.train(train_set)

print("Naive Bayes Algo accuracy: %0.2f " %(nltk.classify.accuracy(classifier, train_set) * 100))

classifier.show_most_informative_features(15)

"""# Saving the Classifier"""

print(classifier)

with open ("naivebayes.pickle", "wb") as f:
     pickle.dump(classifier, f)

with open ("naivebayes.pickle", "rb") as f:
    classifier_l2 = pickle.load(f)

"""# Using Scikit-Learn API"""

from nltk.classify.scikitlearn import SklearnClassifier

from sklearn.naive_bayes import MultinomialNB
from sklearn.naive_bayes import GaussianNB
from sklearn.naive_bayes import BernoulliNB

from sklearn.linear_model import LogisticRegression
from sklearn.linear_model import SGDClassifier
from sklearn.svm import SVC

MNB_classifier = SklearnClassifier(MultinomialNB())
MNB_classifier.train(train_set)
print("Test Accuracy of MNB Classifier: %0.2f " %(nltk.classify.accuracy(MNB_classifier, test_set)*100))

# GNB_classifier = SklearnClassifier(GaussianNB())
# GNB_classifier.train(train_set)
# print("Test Accuracy of MNB Classifier: %0.2f " %(nltk.classify.accuracy(GNB_classifier, test_set)*100))

LogisticRegression_classifier = SklearnClassifier(LogisticRegression())
LogisticRegression_classifier.train(train_set)
print("Test Accuracy of MNB Classifier: %0.2f " %(nltk.classify.accuracy(LogisticRegression_classifier, test_set)*100))

SVC_classifier = SklearnClassifier(SVC())
SVC_classifier.train(train_set)
print("Test Accuracy of MNB Classifier: %0.2f " %(nltk.classify.accuracy(SVC_classifier, test_set)*100))

SGDClassifier_classifier = SklearnClassifier(SGDClassifier())
SGDClassifier_classifier.train(train_set)
print("Test Accuracy of MNB Classifier: %0.2f " %(nltk.classify.accuracy(SGDClassifier_classifier, test_set)*100))

"""# Combining Algorithms with NLTK"""

from nltk.classify import ClassifierI
from statistics import mode

class VoteClassifier(ClassifierI):
    def __init__(self, *classifiers):
        self._classifiers = classifiers
    
    def classify(self, features):
        votes = []
        for cfr in self._classifiers:
            v = cfr.classify(features)
            votes.append(v)
        return mode(votes)

    def confidence(self, features):
        votes = []
        for cfr in self._classifiers:
            v = cfr.classify(features)
            votes.append(v)
        
        choice_votes = votes.count(mode(votes))
        conf = choice_votes / len(votes) 
        return conf

voted_classifier = VoteClassifier(classifier, MNB_classifier, SVC_classifier, SGDClassifier_classifier, LogisticRegression_classifier)
print("Votes classifier accuracy = %0.2f "%(nltk.classify.accuracy(voted_classifier, train_set) * 100))
print("Classification: ", voted_classifier.classify(test_set[0][0]))
print("Confidence", voted_classifier.confidence(test_set[0][0]))

