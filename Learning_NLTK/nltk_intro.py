# -*- coding: utf-8 -*-
"""NLTK_Intro.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LoaguSJjlDM_1qW6Nt_XTBrFoUxqnHhY
"""

import nltk
import matplotlib
matplotlib.use('Agg')

nltk.download('all')

"""# Tokenizing in NLTK"""

from nltk.tokenize import sent_tokenize, word_tokenize

example_text = "Hello There, how are you doing today? Looks like Python is life! Sky is beautiful. Stop speaking nonsense ! "

print(sent_tokenize(example_text))

print(word_tokenize(example_text))

for i in word_tokenize(example_text):
    print(i, end = ' ')

"""# Stop Words Removal"""

from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize

example_sentence = "This is an example showiong off stop words filteration"
stop_words = set(stopwords.words('english'))

print(stop_words)

words = word_tokenize(example_sentence)

filtered_sentence = []
for w in words:
    if(w not in stop_words):
        filtered_sentence.append(w)

print(filtered_sentence)

"""# Stemming Words"""

from nltk.stem import PorterStemmer
from nltk.tokenize import word_tokenize

ps = PorterStemmer()

example_words = ["Python", "Pythoner", "Pythoning", "Pythoned", "Pythonly", "Pythonic"]

for w in example_words:
    print(ps.stem(w))

new_text = "it is very important to for python programmer to write pythonic code to make the python program more pythonly and then the problem is pythoned."

words = word_tokenize(new_text)
for w in words:
    print(ps.stem(w))

"""# Part of Speech Tagging"""

from nltk.corpus import state_union
from nltk.tokenize import PunktSentenceTokenizer               # Unsupervised ML Tokenizer

''' 
POS tag list:

CC	coordinating conjunction
CD	cardinal digit
DT	determiner
EX	existential there (like: "there is" ... think of it like "there exists")
FW	foreign word
IN	preposition/subordinating conjunction
JJ	adjective	'big'
JJR	adjective, comparative	'bigger'
JJS	adjective, superlative	'biggest'
LS	list marker	1)
MD	modal	could, will
NN	noun, singular 'desk'
NNS	noun plural	'desks'
NNP	proper noun, singular	'Harrison'
NNPS	proper noun, plural	'Americans'
PDT	predeterminer	'all the kids'
POS	possessive ending	parent\'s
PRP	personal pronoun	I, he, she
PRP$	possessive pronoun	my, his, hers
RB	adverb	very, silently,
RBR	adverb, comparative	better
RBS	adverb, superlative	best
RP	particle	give up
TO	to	go 'to' the store.
UH	interjection	errrrrrrrm
VB	verb, base form	take
VBD	verb, past tense	took
VBG	verb, gerund/present participle	taking
VBN	verb, past participle	taken
VBP	verb, sing. present, non-3d	take
VBZ	verb, 3rd person sing. present	takes
WDT	wh-determiner	which
WP	wh-pronoun	who, what
WP$	possessive wh-pronoun	whose
WRB	wh-abverb	where, when
'''

train_text = state_union.raw("2005-GWBush.txt")
sample_text = state_union.raw("2006-GWBush.txt")

custom_sent_tokenizer = PunktSentenceTokenizer(train_text=train_text, verbose=True)

tokenized = custom_sent_tokenizer.tokenize(sample_text)

print(tokenized)

def process_content():
    try:
        for i in tokenized:
            words = nltk.word_tokenize(i)
            tagged = nltk.pos_tag(words)
            print(tagged)
            
    except exception as e:
        print(str(e))

process_content()

"""# Chunking"""

train_text = state_union.raw("2005-GWBush.txt")
sample_text = state_union.raw("2006-GWBush.txt")

custom_sent_tokenizer = PunktSentenceTokenizer(train_text)
tokenized = custom_sent_tokenizer.tokenize(sample_text)

print(tokenized)

def process_content():
    try:
        for i in tokenized:
            words = nltk.word_tokenize(i)
            tagged = nltk.pos_tag(words)
            chunkGram = r"""Chunk: {<RB.?>*<VB.?>*<NNP>+<NN>?} """
            chunkParser = nltk.RegexpParser(chunkGram)
            chunked = chunkParser.parse(tagged)
            # chunked.draw()
            print(chunked)

            for subtree in chunked.subtrees(filter=lambda t: t.label == 'Chunk'):
                print(subtree)
    
    except Exception as e:
        print(str(e))

process_content()

"""# Chinking"""

train_text = state_union.raw("2005-GWBush.txt")
sample_text = state_union.raw("2006-GWBush.txt")

custom_sent_tokenizer = PunktSentenceTokenizer(train_text)
tokenized = custom_sent_tokenizer.tokenize(sample_text)

def process_content():
    try:
        for i in tokenized:
            words = nltk.word_tokenize(i)
            tagged = nltk.pos_tag(words)
            chunkGram = r"""Chunk: {<.*>+} 
                                    }<VB.?|IN|DT|TO>+{"""
            chunkParser = nltk.RegexpParser(chunkGram)
            chunked = chunkParser.parse(tagged)
            # chunked.draw()
            print(chunked)

            for subtree in chunked.subtrees(filter=lambda t: t.label == 'Chunk'):
                print(subtree)
    
    except Exception as e:
        print(str(e))

process_content()

"""# Named Entity Recognition"""

'''NE Type and Examples
ORGANIZATION - Georgia-Pacific Corp., WHO
PERSON - Eddy Bonte, President Obama
LOCATION - Murray River, Mount Everest
DATE - June, 2008-06-29
TIME - two fifty a m, 1:30 p.m.
MONEY - 175 million Canadian Dollars, GBP 10.40
PERCENT - twenty pct, 18.75 %
FACILITY - Washington Monument, Stonehenge
GPE - South East Asia, Midlothian'''

# import nltk
# nltk.download('all')
from nltk.corpus import state_union
from nltk.tokenize import PunktSentenceTokenizer

train_text = state_union.raw("2005-GWBush.txt")
sample_text = state_union.raw("2006-GWBush.txt")

custom_sent_tokenizer = PunktSentenceTokenizer(train_text)
tokenized = custom_sent_tokenizer.tokenize(sample_text)

print(tokenized)

def process_content():
    try:
        for i in tokenized:
            words = nltk.word_tokenize(i)
            tagged = nltk.pos_tag(words)
            named_ent = nltk.ne_chunk(tagged, binary=True)
            for i in named_ent:
                print(i)
    except Exception as e:
        print(str(e))

process_content()

"""# Lemmatizing"""

from nltk.stem import WordNetLemmatizer

lemmatizer = WordNetLemmatizer()

print(lemmatizer.lemmatize('cats'))
print(lemmatizer.lemmatize('cactii'))
print(lemmatizer.lemmatize('geese'))
print(lemmatizer.lemmatize('rocks'))
print(lemmatizer.lemmatize('simplify'))

print(lemmatizer.lemmatize('better', pos='n'))
print(lemmatizer.lemmatize('better', pos='a'))
print(lemmatizer.lemmatize('running', pos='n'))
print(lemmatizer.lemmatize('running', pos='v'))

"""# WordNet with NLTK"""

from nltk.corpus import wordnet

syns = wordnet.synsets("program")

print(syns)

for i in syns:
    print(i)

print(syns[0])

print(syns[0].lemmas())

print(syns[0].lemmas()[0].name())

for i in range(len(syns)):
    print(syns[i].lemmas()[0].name())
    print(syns[i].definition())
    print(syns[i].examples())

print(syns[0].definition())

print(syns[0].examples())

"""## Getting Synonyms and antonyms"""

synonyms_l = []
antonyms_l = []

for syn in wordnet.synsets("good"):
    for l in syn.lemmas():
        synonyms_l.append(l.name())
        if l.antonyms():
            antonyms_l.append(l.antonyms()[0].name())

for i, j in zip(synonyms_l, antonyms_l):
    print(i, j)

"""## Finding Word Similarity Between the two words"""

w1 = wordnet.synset("ship.n.01")
w2 = wordnet.synset("boat.n.01")
print(w1, w2)

print(w1.wup_similarity(w2))

w1 = wordnet.synset("ship.n.01")
w2 = wordnet.synset("car.n.01")
w3 = wordnet.synset("whale.n.01")
w4 = wordnet.synset("elephant.n.01")

print(w1.wup_similarity(w2))
print(w1.wup_similarity(w3))
print(w1.wup_similarity(w4))

